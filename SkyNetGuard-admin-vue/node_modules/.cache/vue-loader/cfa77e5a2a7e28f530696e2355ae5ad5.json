{"remainingRequest":"D:\\qianduan1\\vue-admin-template\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\qianduan1\\vue-admin-template\\src\\components\\CubeView\\ThreeDView.vue?vue&type=style&index=0&id=f059c600&scoped=true&lang=css","dependencies":[{"path":"D:\\qianduan1\\vue-admin-template\\src\\components\\CubeView\\ThreeDView.vue","mtime":1729146483321},{"path":"D:\\qianduan1\\vue-admin-template\\node_modules\\css-loader\\dist\\cjs.js","mtime":1722767762650},{"path":"D:\\qianduan1\\vue-admin-template\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1722767762557},{"path":"D:\\qianduan1\\vue-admin-template\\node_modules\\postcss-loader\\src\\index.js","mtime":1722767762493},{"path":"D:\\qianduan1\\vue-admin-template\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1722767764221},{"path":"D:\\qianduan1\\vue-admin-template\\node_modules\\vue-loader\\lib\\index.js","mtime":1722767762512}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQoudGhyZWUtZC12aWV3LWNvbnRhaW5lciB7DQogIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgd2lkdGg6IDEwMCU7DQogIGhlaWdodDogMTAwJTsNCn0NCg0KLnRpdGxlIHsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICB0b3A6IDEwcHg7DQogIGxlZnQ6IDUwJTsNCiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpOw0KICBmb250LXNpemU6IDIwcHg7DQogIGZvbnQtd2VpZ2h0OiBib2xkOw0KICB6LWluZGV4OiAxMDsNCn0NCg0KLmF4aXMtbGVnZW5kIHsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICB0b3A6IDE1cHg7DQogIHJpZ2h0OiAwcHg7DQogIGRpc3BsYXk6IGZsZXg7DQogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogIGdhcDogNXB4Ow0KICBmb250LXNpemU6IDEwcHg7DQogIHotaW5kZXg6IDEwOw0KfQ0KDQoudGl0bGUsDQouYXhpcy1sZWdlbmQgew0KICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCk7IC8qIOWNiumAj+aYjuiDjOaZr+minOiJsiAqLw0KICBwYWRkaW5nOiA1cHg7DQogIGJvcmRlci1yYWRpdXM6IDVweDsNCn0NCg0KLmxlZ2VuZC1pdGVtIHsNCiAgZGlzcGxheTogZmxleDsNCiAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCn0NCg0KLmF4aXMtY29sb3Igew0KICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQogIHdpZHRoOiAxMnB4Ow0KICBoZWlnaHQ6IDEycHg7DQogIG1hcmdpbi1yaWdodDogNXB4Ow0KfQ0KDQoueC1heGlzIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmMDAwMDsgLyogWCDovbTnmoTnuqLoibIgKi8NCn0NCg0KLnktYXhpcyB7DQogIGJhY2tncm91bmQtY29sb3I6ICMwMGZmMDA7IC8qIFkg6L2055qE57u/6ImyICovDQp9DQoNCi56LWF4aXMgew0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwMGZmOyAvKiBaIOi9tOeahOiTneiJsiAqLw0KfQ0KDQoudGhyZWUtZC12aWV3IHsNCiAgd2lkdGg6IDEwMCU7DQogIGhlaWdodDogMTAwJTsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICB0b3A6IDA7DQogIGxlZnQ6IDA7DQogIHotaW5kZXg6IDE7DQp9DQoNCi5pbmZvLWJveCB7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgYm90dG9tOiAxMHB4Ow0KICBsZWZ0OiAxMHB4Ow0KICAvKiB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7ICovDQogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTsNCiAgcGFkZGluZzogNXB4IDEwcHg7DQogIGJvcmRlci1yYWRpdXM6IDVweDsNCiAgZm9udC1zaXplOiAxNHB4Ow0KICB6LWluZGV4OiAxMDsNCiAgLyogYm94LXNoYWRvdzogMHB4IDBweCA1cHggcmdiYSgwLCAwLCAwLCAwLjIpOyAqLw0KICBmb250LXdlaWdodDogNjAwOw0KfQ0KDQo="},{"version":3,"sources":["ThreeDView.vue"],"names":[],"mappingsqBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ThreeDView.vue","sourceRoot":"src/components/CubeView","sourcesContent":["<!-- <template>\r\n  <div ref=\"threeDView\" style=\"width: 100%; height: 100%\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nexport default {\r\n  name: \"ThreeDView\",\r\n  mounted() {\r\n    this.initThreeDView();\r\n  },\r\n  methods: {\r\n    initThreeDView() {\r\n      // 创建场景\r\n      const scene = new THREE.Scene();\r\n      scene.background = new THREE.Color(0xffffff); // 设置背景为白色\r\n\r\n      // 创建相机\r\n      const camera = new THREE.PerspectiveCamera(\r\n        75,\r\n        this.$refs.threeDView.clientWidth / this.$refs.threeDView.clientHeight,\r\n        0.1,\r\n        1000\r\n      );\r\n      camera.position.z = 2; // 调整相机位置以增加立方体占比\r\n\r\n      // 创建渲染器\r\n      const renderer = new THREE.WebGLRenderer({ alpha: true });\r\n      renderer.setSize(\r\n        this.$refs.threeDView.clientWidth,\r\n        this.$refs.threeDView.clientHeight\r\n      );\r\n      this.$refs.threeDView.appendChild(renderer.domElement);\r\n\r\n      // 创建正方体几何体\r\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\r\n\r\n      // 创建淡青色材质\r\n      const material = new THREE.MeshBasicMaterial({\r\n        color: 0xe0ffff, // 淡青色 (light cyan)\r\n        transparent: true,\r\n        opacity: 0.5, // 设置透明度\r\n      });\r\n\r\n      // 创建网格并添加到场景中\r\n      const cube = new THREE.Mesh(geometry, material);\r\n      scene.add(cube);\r\n\r\n      // 创建线框材质并添加到场景中\r\n      const edges = new THREE.EdgesGeometry(geometry);\r\n      const lineMaterial = new THREE.LineBasicMaterial({ color: 0x0000ff }); // 蓝色线条\r\n      const lineSegments = new THREE.LineSegments(edges, lineMaterial);\r\n      scene.add(lineSegments);\r\n\r\n      // 创建三维坐标轴\r\n      this.createAxes(scene);\r\n\r\n      // 创建 OrbitControls 控件\r\n      const controls = new OrbitControls(camera, renderer.domElement);\r\n      controls.enableDamping = true; // 启用阻尼效果（惯性）\r\n      controls.dampingFactor = 0.25;\r\n      controls.screenSpacePanning = false;\r\n      controls.maxPolarAngle = Math.PI / 2;\r\n\r\n      // 渲染循环\r\n      const animate = () => {\r\n        requestAnimationFrame(animate);\r\n\r\n        controls.update(); // 仅更新控制器\r\n\r\n        renderer.render(scene, camera);\r\n      };\r\n\r\n      animate();\r\n\r\n      // 窗口调整时更新渲染器和相机\r\n      window.addEventListener(\"resize\", () => {\r\n        const width = this.$refs.threeDView.clientWidth;\r\n        const height = this.$refs.threeDView.clientHeight;\r\n\r\n        camera.aspect = width / height;\r\n        camera.updateProjectionMatrix();\r\n\r\n        renderer.setSize(width, height);\r\n      });\r\n    },\r\n\r\n    createAxes(scene) {\r\n      const axisLength = 1.0;\r\n      const arrowLength = 0.2;\r\n      const arrowHeadLength = 0.05;\r\n      const arrowHeadWidth = 0.05;\r\n\r\n      // X轴：红色\r\n      this.createAxis(\r\n        scene,\r\n        new THREE.Vector3(1, 0, 0),\r\n        0xff0000,\r\n        axisLength,\r\n        arrowLength,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      );\r\n\r\n      // Y轴：绿色\r\n      this.createAxis(\r\n        scene,\r\n        new THREE.Vector3(0, 1, 0),\r\n        0x00ff00,\r\n        axisLength,\r\n        arrowLength,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      );\r\n\r\n      // Z轴：蓝色\r\n      this.createAxis(\r\n        scene,\r\n        new THREE.Vector3(0, 0, 1),\r\n        0x0000ff,\r\n        axisLength,\r\n        arrowLength,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      );\r\n    },\r\n\r\n    createAxis(\r\n      scene,\r\n      direction,\r\n      color,\r\n      axisLength,\r\n      arrowLength,\r\n      arrowHeadLength,\r\n      arrowHeadWidth\r\n    ) {\r\n      // 正半轴箭头\r\n      const arrowHelper = new THREE.ArrowHelper(\r\n        direction,\r\n        new THREE.Vector3(0, 0, 0),\r\n        axisLength,\r\n        color,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      );\r\n      scene.add(arrowHelper);\r\n\r\n      // 负半轴线段\r\n      const lineMaterial = new THREE.LineBasicMaterial({ color: color });\r\n      const lineGeometry = new THREE.BufferGeometry().setFromPoints([\r\n        new THREE.Vector3(0, 0, 0),\r\n        direction.clone().multiplyScalar(-axisLength),\r\n      ]);\r\n      const line = new THREE.Line(lineGeometry, lineMaterial);\r\n      scene.add(line);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 你可以根据需要调整样式 */\r\n</style> -->\r\n\r\n<!-- 2版 -->\r\n\r\n<!-- <template>\r\n  <div class=\"three-d-view-container\">\r\n    <div class=\"title\">接入终端位置</div>\r\n    <div class=\"axis-legend\">\r\n      <div class=\"legend-item\">\r\n        <span class=\"axis-color x-axis\" /> X 轴: 前后方向\r\n      </div>\r\n      <div class=\"legend-item\">\r\n        <span class=\"axis-color y-axis\" /> Y 轴: 上下方向\r\n      </div>\r\n      <div class=\"legend-item\">\r\n        <span class=\"axis-color z-axis\" /> Z 轴: 左右方向\r\n      </div>\r\n    </div>\r\n    <div ref=\"threeDView\" class=\"three-d-view\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\n\r\nexport default {\r\n  name: 'ThreeDView',\r\n  mounted() {\r\n    this.initThreeDView()\r\n  },\r\n  methods: {\r\n    initThreeDView() {\r\n      // 创建场景\r\n      const scene = new THREE.Scene()\r\n      scene.background = new THREE.Color(0xffffff) // 设置背景为白色\r\n\r\n      // 创建相机\r\n      const camera = new THREE.PerspectiveCamera(\r\n        75,\r\n        this.$refs.threeDView.clientWidth / this.$refs.threeDView.clientHeight,\r\n        0.1,\r\n        1000\r\n      )\r\n      camera.position.set(0, 0.5, 2) // 设置相机位置\r\n      camera.lookAt(new THREE.Vector3(0, 0.5, 0)) // 使相机聚焦在立方体中心\r\n      //  camera.position.z = 2 // 调整相机位置以增加立方体占比\r\n\r\n      // 创建渲染器\r\n      const renderer = new THREE.WebGLRenderer({ alpha: true })\r\n      renderer.setSize(\r\n        this.$refs.threeDView.clientWidth,\r\n        this.$refs.threeDView.clientHeight\r\n      )\r\n      this.$refs.threeDView.appendChild(renderer.domElement)\r\n\r\n      // 创建正方体几何体\r\n      const geometry = new THREE.BoxGeometry(1, 1, 1)\r\n\r\n      // 创建淡青色材质\r\n      const material = new THREE.MeshBasicMaterial({\r\n        color: 0xe0ffff, // 淡青色 (light cyan)\r\n        transparent: true,\r\n        opacity: 0.5 // 设置透明度\r\n      })\r\n\r\n      // 创建网格并添加到场景中\r\n      const cube = new THREE.Mesh(geometry, material)\r\n      scene.add(cube)\r\n\r\n      // 创建线框材质并添加到场景中\r\n      const edges = new THREE.EdgesGeometry(geometry)\r\n      const lineMaterial = new THREE.LineBasicMaterial({ color: 0x0000ff }) // 蓝色线条\r\n      const lineSegments = new THREE.LineSegments(edges, lineMaterial)\r\n      lineSegments.position.y = 0.5 // 与立方体位置同步\r\n      scene.add(lineSegments)\r\n\r\n      // 创建三维坐标轴\r\n      this.createAxes(scene)\r\n\r\n      // 创建 OrbitControls 控件\r\n      const controls = new OrbitControls(camera, renderer.domElement)\r\n      controls.enableDamping = true // 启用阻尼效果（惯性）\r\n      controls.dampingFactor = 0.25\r\n      controls.screenSpacePanning = false\r\n      controls.maxPolarAngle = Math.PI / 2\r\n      controls.target.set(0, 0.5, 0) // 将控制目标设置为立方体中心\r\n      controls.update() // 更新控制器，使设置生效\r\n      cube.position.y = 0.5 // 调整立方体的位置，使中心位于底部平面\r\n\r\n      // 渲染循环\r\n      const animate = () => {\r\n        requestAnimationFrame(animate)\r\n\r\n        controls.update() // 仅更新控制器\r\n\r\n        renderer.render(scene, camera)\r\n      }\r\n\r\n      animate()\r\n\r\n      // 窗口调整时更新渲染器和相机\r\n      window.addEventListener('resize', () => {\r\n        const width = this.$refs.threeDView.clientWidth\r\n        const height = this.$refs.threeDView.clientHeight\r\n\r\n        camera.aspect = width / height\r\n        camera.updateProjectionMatrix()\r\n\r\n        renderer.setSize(width, height)\r\n      })// ... Three.js 代码与之前相同\r\n    },\r\n    createAxes(scene) {\r\n      const axisLength = 1.0\r\n      const arrowLength = 0.2\r\n      const arrowHeadLength = 0.05\r\n      const arrowHeadWidth = 0.05\r\n\r\n      // X轴：红色\r\n      this.createAxis(\r\n        scene,\r\n        new THREE.Vector3(1, 0, 0),\r\n        0xff0000,\r\n        axisLength,\r\n        arrowLength,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      )\r\n\r\n      // Y轴：绿色\r\n      this.createAxis(\r\n        scene,\r\n        new THREE.Vector3(0, 1, 0),\r\n        0x00ff00,\r\n        axisLength + 0.3,\r\n        arrowLength,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      )\r\n\r\n      // Z轴：蓝色\r\n      this.createAxis(\r\n        scene,\r\n        new THREE.Vector3(0, 0, 1),\r\n        0x0000ff,\r\n        axisLength,\r\n        arrowLength,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      )// ... 自定义坐标轴代码与之前相同\r\n    },\r\n    createAxis(\r\n      scene,\r\n      direction,\r\n      color,\r\n      axisLength,\r\n      arrowLength,\r\n      arrowHeadLength,\r\n      arrowHeadWidth\r\n    ) {\r\n      // ... 自定义坐标轴代码与之前相同\r\n      // 正半轴箭头\r\n      const arrowHelper = new THREE.ArrowHelper(\r\n        direction,\r\n        new THREE.Vector3(0, 0, 0),\r\n        axisLength,\r\n        color,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      )\r\n      scene.add(arrowHelper)\r\n\r\n      // 负半轴线段\r\n      if (direction.y === 0) {\r\n        const lineMaterial = new THREE.LineBasicMaterial({ color: color })\r\n        const lineGeometry = new THREE.BufferGeometry().setFromPoints([\r\n          new THREE.Vector3(0, 0, 0),\r\n          direction.clone().multiplyScalar(-axisLength)// .add(new THREE.Vector3(0, -0.5, 0))\r\n          // direction.clone().multiplyScalar(-axisLength)\r\n        ])\r\n        const line = new THREE.Line(lineGeometry, lineMaterial)\r\n        scene.add(line)\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.three-d-view-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.title {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  z-index: 10;\r\n}\r\n\r\n.axis-legend {\r\n  position: absolute;\r\n  top: 15px;\r\n  right: 0px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  font-size: 10px;\r\n  z-index: 10;\r\n}\r\n\r\n.title, .axis-legend {\r\n  background-color: rgba(255, 255, 255, 0.8); /* 半透明背景颜色 */\r\n  padding: 5px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.legend-item {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.axis-color {\r\n  display: inline-block;\r\n  width: 12px;\r\n  height: 12px;\r\n  margin-right: 5px;\r\n}\r\n\r\n.x-axis {\r\n  background-color: #ff0000; /* X 轴的红色 */\r\n}\r\n\r\n.y-axis {\r\n  background-color: #00ff00; /* Y 轴的绿色 */\r\n}\r\n\r\n.z-axis {\r\n  background-color: #0000ff; /* Z 轴的蓝色 */\r\n}\r\n\r\n.three-d-view {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 1;\r\n}\r\n</style> -->\r\n\r\n<!-- 3版 -->\r\n\r\n<template>\r\n  <div class=\"three-d-view-container\">\r\n    <div class=\"title\">接入终端位置</div>\r\n    <div class=\"axis-legend\">\r\n      <div class=\"legend-item\">\r\n        <span class=\"axis-color x-axis\" /> X 轴: 前后方向\r\n      </div>\r\n      <div class=\"legend-item\">\r\n        <span class=\"axis-color y-axis\" /> Y 轴: 上下方向\r\n      </div>\r\n      <div class=\"legend-item\">\r\n        <span class=\"axis-color z-axis\" /> Z 轴: 左右方向\r\n      </div>\r\n    </div>\r\n    <div ref=\"threeDView\" class=\"three-d-view\" />\r\n    <!-- 坐标和合法性展示 -->\r\n    <div v-if=\"hoveredPoint\" class=\"info-box\">\r\n      X:{{ hoveredPoint.x.toFixed(2) }}, Y:{{ hoveredPoint.y.toFixed(2) }}, Z:{{ hoveredPoint.z.toFixed(2) }} - {{ legalityStatus }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\n\r\nexport default {\r\n  name: 'ThreeDView',\r\n  props: {\r\n    // eslint-disable-next-line vue/require-default-prop\r\n    points: Array // 从父组件接收的点的坐标\r\n  },\r\n  data() {\r\n    return {\r\n      scene: null,\r\n      camera: null,\r\n      renderer: null,\r\n      raycaster: new THREE.Raycaster(),\r\n      mouse: new THREE.Vector2(),\r\n      spheres: [], // 保存生成的点\r\n      hoveredPoint: null, // 当前鼠标悬停的点\r\n      legalityStatus: '', // 合法性状态\r\n      time: 0 // 用于闪烁效果的计时器\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initThreeDView()\r\n    window.addEventListener('mousemove', this.onMouseMove, false) // 监听鼠标移动事件\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener('mousemove', this.onMouseMove, false) // 移除鼠标事件监听器\r\n  },\r\n  methods: {\r\n    initThreeDView() {\r\n      // 创建场景\r\n      this.scene = new THREE.Scene()\r\n      this.scene.background = new THREE.Color(0xffffff) // 设置背景为白色\r\n\r\n      // 创建相机\r\n      this.camera = new THREE.PerspectiveCamera(\r\n        75,\r\n        this.$refs.threeDView.clientWidth / this.$refs.threeDView.clientHeight,\r\n        0.1,\r\n        1000\r\n      )\r\n      this.camera.position.set(0, 1, 2) // 设置相机位置\r\n      this.camera.lookAt(new THREE.Vector3(0, 0.5, 0)) // 使相机聚焦在立方体底面中心\r\n\r\n      // 创建渲染器\r\n      this.renderer = new THREE.WebGLRenderer({ alpha: true })\r\n      this.renderer.setSize(\r\n        this.$refs.threeDView.clientWidth,\r\n        this.$refs.threeDView.clientHeight\r\n      )\r\n      this.$refs.threeDView.appendChild(this.renderer.domElement)\r\n\r\n      // 创建立方体：原点在底面中心\r\n      const geometry = new THREE.BoxGeometry(1, 1, 1)\r\n      const material = new THREE.MeshBasicMaterial({\r\n        color: 0xe0ffff, // 淡青色 (light cyan)\r\n        transparent: true,\r\n        opacity: 0.5 // 设置透明度\r\n      })\r\n      const cube = new THREE.Mesh(geometry, material)\r\n      cube.position.y = 0.5 // 将立方体的底面放置在 y = 0 平面上\r\n      this.scene.add(cube)\r\n\r\n      // 创建线框材质并添加到场景中\r\n      const edges = new THREE.EdgesGeometry(geometry)\r\n      const lineMaterial = new THREE.LineBasicMaterial({ color: 0x0000ff }) // 蓝色线条\r\n      const lineSegments = new THREE.LineSegments(edges, lineMaterial)\r\n      lineSegments.position.y = 0.5 // 与立方体位置同步\r\n      this.scene.add(lineSegments)\r\n\r\n      // 创建三维坐标轴\r\n      this.createAxes(this.scene)\r\n\r\n      // 添加发光小点\r\n      this.points.forEach(point => {\r\n        // 创建闪烁的发光小点\r\n        // const sphereGeometry = new THREE.SphereGeometry(0.05, 32, 32) // 点的大小\r\n        const sphereGeometry = new THREE.OctahedronGeometry(0.05) // 八面体，大小为0.1\r\n        const sphereMaterial = new THREE.MeshPhongMaterial({\r\n          color: point.legal ? 0x00ff00 : 0xff0000, // 合法的点为绿色，非法为红色\r\n          emissive: point.legal ? 0x00ff00 : 0xff0000, // 设置发光颜色\r\n          emissiveIntensity: 1.5, // 设置发光强度\r\n          shininess: 50 // 增加表面亮度\r\n        })\r\n        const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial)\r\n        sphere.position.set(point.position.x, point.position.y, point.position.z)\r\n        this.spheres.push(sphere)\r\n        this.scene.add(sphere)\r\n      })\r\n\r\n      // 创建 OrbitControls 控件\r\n      const controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n      controls.enableDamping = true // 启用阻尼效果（惯性）\r\n      controls.dampingFactor = 0.25\r\n      controls.screenSpacePanning = false\r\n      controls.maxPolarAngle = Math.PI / 2\r\n      controls.target.set(0, 0.5, 0) // 将控制目标设置为立方体中心\r\n      controls.update() // 更新控制器\r\n\r\n      // 渲染循环\r\n      const animate = () => {\r\n        requestAnimationFrame(animate)\r\n        controls.update() // 更新控制器\r\n        this.animateGlowEffect() // 调用发光动画\r\n        this.renderer.render(this.scene, this.camera)\r\n      }\r\n\r\n      animate()\r\n\r\n      // 窗口调整时更新渲染器和相机\r\n      window.addEventListener('resize', () => {\r\n        const width = this.$refs.threeDView.clientWidth\r\n        const height = this.$refs.threeDView.clientHeight\r\n        this.camera.aspect = width / height\r\n        this.camera.updateProjectionMatrix()\r\n        this.renderer.setSize(width, height)\r\n      })\r\n    },\r\n\r\n    // 动态更新闪烁效果\r\n    animateGlowEffect() {\r\n      this.time += 0.02 // 增加时间，减慢速度\r\n\r\n      // 动态调整球体发光强度，减少闪烁幅度\r\n      this.spheres.forEach(sphere => {\r\n        const scale = 1 + Math.sin(this.time) * 0.1 // 通过正弦波动态调整大小，减少幅度\r\n        sphere.scale.set(scale, scale, scale)\r\n      })\r\n    },\r\n\r\n    onMouseMove(event) {\r\n      // 获取容器的尺寸\r\n      const rect = this.$refs.threeDView.getBoundingClientRect()\r\n\r\n      // 计算鼠标位置的归一化设备坐标（NDC）\r\n      this.mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1\r\n      this.mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1\r\n\r\n      // 更新射线\r\n      this.raycaster.setFromCamera(this.mouse, this.camera)\r\n\r\n      // 计算物体和射线的交集\r\n      const intersects = this.raycaster.intersectObjects(this.spheres)\r\n\r\n      if (intersects.length > 0) {\r\n        const intersectedObject = intersects[0].object\r\n        const position = intersectedObject.position\r\n        this.hoveredPoint = position // 记录悬停点的坐标\r\n        this.legalityStatus = this.checkIfPointInCube(position) // 判断合法性\r\n      } else {\r\n        this.hoveredPoint = null // 没有悬停点时清除状态\r\n        this.legalityStatus = ''\r\n      }\r\n    },\r\n\r\n    checkIfPointInCube(position) {\r\n      // 判断是否在立方体内\r\n      const isInCube = (position.x >= -0.5 && position.x <= 0.5) &&\r\n                       (position.y >= 0 && position.y <= 1) && // y 范围是 [0, 1]\r\n                       (position.z >= -0.5 && position.z <= 0.5)\r\n      return isInCube ? '合法' : '非法'\r\n    },\r\n\r\n    createAxes(scene) {\r\n      const axisLength = 1.0\r\n      const arrowLength = 0.2\r\n      const arrowHeadLength = 0.05\r\n      const arrowHeadWidth = 0.05\r\n\r\n      // X轴：红色\r\n      this.createAxis(\r\n        scene,\r\n        new THREE.Vector3(1, 0, 0),\r\n        0xff0000,\r\n        axisLength,\r\n        arrowLength,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      )\r\n\r\n      // Y轴：绿色\r\n      this.createAxis(\r\n        scene,\r\n        new THREE.Vector3(0, 1, 0),\r\n        0x00ff00,\r\n        axisLength + 0.3,\r\n        arrowLength,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      )\r\n\r\n      // Z轴：蓝色\r\n      this.createAxis(\r\n        scene,\r\n        new THREE.Vector3(0, 0, 1),\r\n        0x0000ff,\r\n        axisLength,\r\n        arrowLength,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      )\r\n    },\r\n\r\n    createAxis(\r\n      scene,\r\n      direction,\r\n      color,\r\n      axisLength,\r\n      arrowLength,\r\n      arrowHeadLength,\r\n      arrowHeadWidth\r\n    ) {\r\n      // 正半轴箭头\r\n      const arrowHelper = new THREE.ArrowHelper(\r\n        direction,\r\n        new THREE.Vector3(0, 0, 0),\r\n        axisLength,\r\n        color,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      )\r\n      scene.add(arrowHelper)\r\n\r\n      // 负半轴线段\r\n      if (direction.y === 0) {\r\n        const lineMaterial = new THREE.LineBasicMaterial({ color: color })\r\n        const lineGeometry = new THREE.BufferGeometry().setFromPoints([\r\n          new THREE.Vector3(0, 0, 0),\r\n          direction.clone().multiplyScalar(-axisLength)\r\n        ])\r\n        const line = new THREE.Line(lineGeometry, lineMaterial)\r\n        scene.add(line)\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.three-d-view-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.title {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  z-index: 10;\r\n}\r\n\r\n.axis-legend {\r\n  position: absolute;\r\n  top: 15px;\r\n  right: 0px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  font-size: 10px;\r\n  z-index: 10;\r\n}\r\n\r\n.title,\r\n.axis-legend {\r\n  background-color: rgba(255, 255, 255, 0.8); /* 半透明背景颜色 */\r\n  padding: 5px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.legend-item {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.axis-color {\r\n  display: inline-block;\r\n  width: 12px;\r\n  height: 12px;\r\n  margin-right: 5px;\r\n}\r\n\r\n.x-axis {\r\n  background-color: #ff0000; /* X 轴的红色 */\r\n}\r\n\r\n.y-axis {\r\n  background-color: #00ff00; /* Y 轴的绿色 */\r\n}\r\n\r\n.z-axis {\r\n  background-color: #0000ff; /* Z 轴的蓝色 */\r\n}\r\n\r\n.three-d-view {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 1;\r\n}\r\n\r\n.info-box {\r\n  position: absolute;\r\n  bottom: 10px;\r\n  left: 10px;\r\n  /* transform: translateX(-50%); */\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n  padding: 5px 10px;\r\n  border-radius: 5px;\r\n  font-size: 14px;\r\n  z-index: 10;\r\n  /* box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2); */\r\n  font-weight: 600;\r\n}\r\n\r\n</style>\r\n"]}]}