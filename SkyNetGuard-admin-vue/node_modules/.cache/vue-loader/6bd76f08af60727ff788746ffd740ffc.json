{"remainingRequest":"D:\\qianduan1\\vue-admin-template\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\qianduan1\\vue-admin-template\\src\\components\\CubeView\\ThreeDView.vue?vue&type=style&index=0&id=f059c600&scoped=true&lang=css","dependencies":[{"path":"D:\\qianduan1\\vue-admin-template\\src\\components\\CubeView\\ThreeDView.vue","mtime":1726312583139},{"path":"D:\\qianduan1\\vue-admin-template\\node_modules\\css-loader\\dist\\cjs.js","mtime":1722767762650},{"path":"D:\\qianduan1\\vue-admin-template\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1722767762557},{"path":"D:\\qianduan1\\vue-admin-template\\node_modules\\postcss-loader\\src\\index.js","mtime":1722767762493},{"path":"D:\\qianduan1\\vue-admin-template\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1722767764221},{"path":"D:\\qianduan1\\vue-admin-template\\node_modules\\vue-loader\\lib\\index.js","mtime":1722767762512}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi50aHJlZS1kLXZpZXctY29udGFpbmVyIHsNCiAgcG9zaXRpb246IHJlbGF0aXZlOw0KICB3aWR0aDogMTAwJTsNCiAgaGVpZ2h0OiAxMDAlOw0KfQ0KDQoudGl0bGUgew0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHRvcDogMTBweDsNCiAgbGVmdDogNTAlOw0KICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7DQogIGZvbnQtc2l6ZTogMjBweDsNCiAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogIHotaW5kZXg6IDEwOw0KfQ0KDQouYXhpcy1sZWdlbmQgew0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHRvcDogMTBweDsNCiAgcmlnaHQ6IDEwcHg7DQogIGRpc3BsYXk6IGZsZXg7DQogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogIGdhcDogNXB4Ow0KICBmb250LXNpemU6IDE0cHg7DQogIHotaW5kZXg6IDEwOw0KfQ0KDQoudGl0bGUsIC5heGlzLWxlZ2VuZCB7DQogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTsgLyog5Y2K6YCP5piO6IOM5pmv6aKc6ImyICovDQogIHBhZGRpbmc6IDVweDsNCiAgYm9yZGVyLXJhZGl1czogNXB4Ow0KfQ0KDQoubGVnZW5kLWl0ZW0gew0KICBkaXNwbGF5OiBmbGV4Ow0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KfQ0KDQouYXhpcy1jb2xvciB7DQogIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCiAgd2lkdGg6IDEycHg7DQogIGhlaWdodDogMTJweDsNCiAgbWFyZ2luLXJpZ2h0OiA1cHg7DQp9DQoNCi54LWF4aXMgew0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwMDAwOyAvKiBYIOi9tOeahOe6ouiJsiAqLw0KfQ0KDQoueS1heGlzIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogIzAwZmYwMDsgLyogWSDovbTnmoTnu7/oibIgKi8NCn0NCg0KLnotYXhpcyB7DQogIGJhY2tncm91bmQtY29sb3I6ICMwMDAwZmY7IC8qIFog6L2055qE6JOd6ImyICovDQp9DQoNCi50aHJlZS1kLXZpZXcgew0KICB3aWR0aDogMTAwJTsNCiAgaGVpZ2h0OiAxMDAlOw0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHRvcDogMDsNCiAgbGVmdDogMDsNCiAgei1pbmRleDogMTsNCn0NCg=="},{"version":3,"sources":["ThreeDView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+VA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ThreeDView.vue","sourceRoot":"src/components/CubeView","sourcesContent":["<!-- <template>\r\n  <div ref=\"threeDView\" style=\"width: 100%; height: 100%\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nexport default {\r\n  name: \"ThreeDView\",\r\n  mounted() {\r\n    this.initThreeDView();\r\n  },\r\n  methods: {\r\n    initThreeDView() {\r\n      // 创建场景\r\n      const scene = new THREE.Scene();\r\n      scene.background = new THREE.Color(0xffffff); // 设置背景为白色\r\n\r\n      // 创建相机\r\n      const camera = new THREE.PerspectiveCamera(\r\n        75,\r\n        this.$refs.threeDView.clientWidth / this.$refs.threeDView.clientHeight,\r\n        0.1,\r\n        1000\r\n      );\r\n      camera.position.z = 2; // 调整相机位置以增加立方体占比\r\n\r\n      // 创建渲染器\r\n      const renderer = new THREE.WebGLRenderer({ alpha: true });\r\n      renderer.setSize(\r\n        this.$refs.threeDView.clientWidth,\r\n        this.$refs.threeDView.clientHeight\r\n      );\r\n      this.$refs.threeDView.appendChild(renderer.domElement);\r\n\r\n      // 创建正方体几何体\r\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\r\n\r\n      // 创建淡青色材质\r\n      const material = new THREE.MeshBasicMaterial({\r\n        color: 0xe0ffff, // 淡青色 (light cyan)\r\n        transparent: true,\r\n        opacity: 0.5, // 设置透明度\r\n      });\r\n\r\n      // 创建网格并添加到场景中\r\n      const cube = new THREE.Mesh(geometry, material);\r\n      scene.add(cube);\r\n\r\n      // 创建线框材质并添加到场景中\r\n      const edges = new THREE.EdgesGeometry(geometry);\r\n      const lineMaterial = new THREE.LineBasicMaterial({ color: 0x0000ff }); // 蓝色线条\r\n      const lineSegments = new THREE.LineSegments(edges, lineMaterial);\r\n      scene.add(lineSegments);\r\n\r\n      // 创建三维坐标轴\r\n      this.createAxes(scene);\r\n\r\n      // 创建 OrbitControls 控件\r\n      const controls = new OrbitControls(camera, renderer.domElement);\r\n      controls.enableDamping = true; // 启用阻尼效果（惯性）\r\n      controls.dampingFactor = 0.25;\r\n      controls.screenSpacePanning = false;\r\n      controls.maxPolarAngle = Math.PI / 2;\r\n\r\n      // 渲染循环\r\n      const animate = () => {\r\n        requestAnimationFrame(animate);\r\n\r\n        controls.update(); // 仅更新控制器\r\n\r\n        renderer.render(scene, camera);\r\n      };\r\n\r\n      animate();\r\n\r\n      // 窗口调整时更新渲染器和相机\r\n      window.addEventListener(\"resize\", () => {\r\n        const width = this.$refs.threeDView.clientWidth;\r\n        const height = this.$refs.threeDView.clientHeight;\r\n\r\n        camera.aspect = width / height;\r\n        camera.updateProjectionMatrix();\r\n\r\n        renderer.setSize(width, height);\r\n      });\r\n    },\r\n\r\n    createAxes(scene) {\r\n      const axisLength = 1.0;\r\n      const arrowLength = 0.2;\r\n      const arrowHeadLength = 0.05;\r\n      const arrowHeadWidth = 0.05;\r\n\r\n      // X轴：红色\r\n      this.createAxis(\r\n        scene,\r\n        new THREE.Vector3(1, 0, 0),\r\n        0xff0000,\r\n        axisLength,\r\n        arrowLength,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      );\r\n\r\n      // Y轴：绿色\r\n      this.createAxis(\r\n        scene,\r\n        new THREE.Vector3(0, 1, 0),\r\n        0x00ff00,\r\n        axisLength,\r\n        arrowLength,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      );\r\n\r\n      // Z轴：蓝色\r\n      this.createAxis(\r\n        scene,\r\n        new THREE.Vector3(0, 0, 1),\r\n        0x0000ff,\r\n        axisLength,\r\n        arrowLength,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      );\r\n    },\r\n\r\n    createAxis(\r\n      scene,\r\n      direction,\r\n      color,\r\n      axisLength,\r\n      arrowLength,\r\n      arrowHeadLength,\r\n      arrowHeadWidth\r\n    ) {\r\n      // 正半轴箭头\r\n      const arrowHelper = new THREE.ArrowHelper(\r\n        direction,\r\n        new THREE.Vector3(0, 0, 0),\r\n        axisLength,\r\n        color,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      );\r\n      scene.add(arrowHelper);\r\n\r\n      // 负半轴线段\r\n      const lineMaterial = new THREE.LineBasicMaterial({ color: color });\r\n      const lineGeometry = new THREE.BufferGeometry().setFromPoints([\r\n        new THREE.Vector3(0, 0, 0),\r\n        direction.clone().multiplyScalar(-axisLength),\r\n      ]);\r\n      const line = new THREE.Line(lineGeometry, lineMaterial);\r\n      scene.add(line);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 你可以根据需要调整样式 */\r\n</style> -->\r\n\r\n<template>\r\n  <div class=\"three-d-view-container\">\r\n    <div class=\"title\">接入终端位置</div>\r\n    <div class=\"axis-legend\">\r\n      <div class=\"legend-item\">\r\n        <span class=\"axis-color x-axis\" /> X 轴: 前后方向\r\n      </div>\r\n      <div class=\"legend-item\">\r\n        <span class=\"axis-color y-axis\" /> Y 轴: 上下方向\r\n      </div>\r\n      <div class=\"legend-item\">\r\n        <span class=\"axis-color z-axis\" /> Z 轴: 左右方向\r\n      </div>\r\n    </div>\r\n    <div ref=\"threeDView\" class=\"three-d-view\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\n\r\nexport default {\r\n  name: 'ThreeDView',\r\n  mounted() {\r\n    this.initThreeDView()\r\n  },\r\n  methods: {\r\n    initThreeDView() {\r\n      // 创建场景\r\n      const scene = new THREE.Scene()\r\n      scene.background = new THREE.Color(0xffffff) // 设置背景为白色\r\n\r\n      // 创建相机\r\n      const camera = new THREE.PerspectiveCamera(\r\n        75,\r\n        this.$refs.threeDView.clientWidth / this.$refs.threeDView.clientHeight,\r\n        0.1,\r\n        1000\r\n      )\r\n      camera.position.set(0, 0.5, 2) // 设置相机位置\r\n      camera.lookAt(new THREE.Vector3(0, 0.5, 0)) // 使相机聚焦在立方体中心\r\n      //  camera.position.z = 2 // 调整相机位置以增加立方体占比\r\n\r\n      // 创建渲染器\r\n      const renderer = new THREE.WebGLRenderer({ alpha: true })\r\n      renderer.setSize(\r\n        this.$refs.threeDView.clientWidth,\r\n        this.$refs.threeDView.clientHeight\r\n      )\r\n      this.$refs.threeDView.appendChild(renderer.domElement)\r\n\r\n      // 创建正方体几何体\r\n      const geometry = new THREE.BoxGeometry(1, 1, 1)\r\n\r\n      // 创建淡青色材质\r\n      const material = new THREE.MeshBasicMaterial({\r\n        color: 0xe0ffff, // 淡青色 (light cyan)\r\n        transparent: true,\r\n        opacity: 0.5 // 设置透明度\r\n      })\r\n\r\n      // 创建网格并添加到场景中\r\n      const cube = new THREE.Mesh(geometry, material)\r\n      scene.add(cube)\r\n\r\n      // 创建线框材质并添加到场景中\r\n      const edges = new THREE.EdgesGeometry(geometry)\r\n      const lineMaterial = new THREE.LineBasicMaterial({ color: 0x0000ff }) // 蓝色线条\r\n      const lineSegments = new THREE.LineSegments(edges, lineMaterial)\r\n      lineSegments.position.y = 0.5 // 与立方体位置同步\r\n      scene.add(lineSegments)\r\n\r\n      // 创建三维坐标轴\r\n      this.createAxes(scene)\r\n\r\n      // 创建 OrbitControls 控件\r\n      const controls = new OrbitControls(camera, renderer.domElement)\r\n      controls.enableDamping = true // 启用阻尼效果（惯性）\r\n      controls.dampingFactor = 0.25\r\n      controls.screenSpacePanning = false\r\n      controls.maxPolarAngle = Math.PI / 2\r\n      controls.target.set(0, 0.5, 0) // 将控制目标设置为立方体中心\r\n      controls.update() // 更新控制器，使设置生效\r\n      cube.position.y = 0.5 // 调整立方体的位置，使中心位于底部平面\r\n\r\n      // 渲染循环\r\n      const animate = () => {\r\n        requestAnimationFrame(animate)\r\n\r\n        controls.update() // 仅更新控制器\r\n\r\n        renderer.render(scene, camera)\r\n      }\r\n\r\n      animate()\r\n\r\n      // 窗口调整时更新渲染器和相机\r\n      window.addEventListener('resize', () => {\r\n        const width = this.$refs.threeDView.clientWidth\r\n        const height = this.$refs.threeDView.clientHeight\r\n\r\n        camera.aspect = width / height\r\n        camera.updateProjectionMatrix()\r\n\r\n        renderer.setSize(width, height)\r\n      })// ... Three.js 代码与之前相同\r\n    },\r\n    createAxes(scene) {\r\n      const axisLength = 1.0\r\n      const arrowLength = 0.2\r\n      const arrowHeadLength = 0.05\r\n      const arrowHeadWidth = 0.05\r\n\r\n      // X轴：红色\r\n      this.createAxis(\r\n        scene,\r\n        new THREE.Vector3(1, 0, 0),\r\n        0xff0000,\r\n        axisLength,\r\n        arrowLength,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      )\r\n\r\n      // Y轴：绿色\r\n      this.createAxis(\r\n        scene,\r\n        new THREE.Vector3(0, 1, 0),\r\n        0x00ff00,\r\n        axisLength + 0.3,\r\n        arrowLength,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      )\r\n\r\n      // Z轴：蓝色\r\n      this.createAxis(\r\n        scene,\r\n        new THREE.Vector3(0, 0, 1),\r\n        0x0000ff,\r\n        axisLength,\r\n        arrowLength,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      )// ... 自定义坐标轴代码与之前相同\r\n    },\r\n    createAxis(\r\n      scene,\r\n      direction,\r\n      color,\r\n      axisLength,\r\n      arrowLength,\r\n      arrowHeadLength,\r\n      arrowHeadWidth\r\n    ) {\r\n      // ... 自定义坐标轴代码与之前相同\r\n      // 正半轴箭头\r\n      const arrowHelper = new THREE.ArrowHelper(\r\n        direction,\r\n        new THREE.Vector3(0, 0, 0),\r\n        axisLength,\r\n        color,\r\n        arrowHeadLength,\r\n        arrowHeadWidth\r\n      )\r\n      scene.add(arrowHelper)\r\n\r\n      // 负半轴线段\r\n      if (direction.y === 0) {\r\n        const lineMaterial = new THREE.LineBasicMaterial({ color: color })\r\n        const lineGeometry = new THREE.BufferGeometry().setFromPoints([\r\n          new THREE.Vector3(0, 0, 0),\r\n          direction.clone().multiplyScalar(-axisLength)// .add(new THREE.Vector3(0, -0.5, 0))\r\n          // direction.clone().multiplyScalar(-axisLength)\r\n        ])\r\n        const line = new THREE.Line(lineGeometry, lineMaterial)\r\n        scene.add(line)\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n  <style scoped>\r\n.three-d-view-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.title {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  z-index: 10;\r\n}\r\n\r\n.axis-legend {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  font-size: 14px;\r\n  z-index: 10;\r\n}\r\n\r\n.title, .axis-legend {\r\n  background-color: rgba(255, 255, 255, 0.8); /* 半透明背景颜色 */\r\n  padding: 5px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.legend-item {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.axis-color {\r\n  display: inline-block;\r\n  width: 12px;\r\n  height: 12px;\r\n  margin-right: 5px;\r\n}\r\n\r\n.x-axis {\r\n  background-color: #ff0000; /* X 轴的红色 */\r\n}\r\n\r\n.y-axis {\r\n  background-color: #00ff00; /* Y 轴的绿色 */\r\n}\r\n\r\n.z-axis {\r\n  background-color: #0000ff; /* Z 轴的蓝色 */\r\n}\r\n\r\n.three-d-view {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 1;\r\n}\r\n</style>\r\n"]}]}